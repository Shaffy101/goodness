#Requires -Version 3.0
[CmdletBinding(DefaultParameterSetName='LogType')]
    Param (
    [Parameter(Mandatory=$true)]
    [ValidateSet('Application','System','Security')]
    [string]$LogType,
    [ValidateSet('Information','Warning','Error','Critical','SuccessAudit','FailureAudit')]
    [string]$EntryType
)

begin {
    Function Search-Logs
        {
        $search = Read-Host -Prompt 'Enter Search Term (Leave Blank to output all results)'
        #$Errortype = -EntryType
        If ($EntryType -eq 'Information'){Write-Output "Information"}elseif($EntryType -eq 'Warning'){Write-Output "Warning"}elseif($EntryType -eq 'Error'){Write-Output "Error"}elseif($EntryType -eq 'Critical'){Write-Output "Critical"}elseif($EntryType -eq 'SuccessAudit'){Write-Output "SuccessAudit"}elseif($EntryType -eq 'FailureAudit'){Write-Output "FailureAudit"}else{$EntryType = $null} 
        If ($Logtype -eq 'Application'){Write-Output "Application"}elseif($Logtype -eq 'System') {Write-Output "System"}elseif($Logtype -eq 'Security'){Write-Output "Security"}    
        #Function get-userlist {
        #$accounts = Get-EventLog -LogName System -EntryType Error | select -ExpandProperty 'Username' | select -Unique
        #$accounttable = @()
        #$no = 0
        #$accounts | foreach {
        #    $no++
        #    $o = [PSCustomObject]@{
        #        No = $no
        #        Name = $_
        #    }
        #    $accounttable += $o
        #}
        #$accounttable | sort No
        #Read-Host -Prompt "Please select which account you would like to filter the logs by"
        #}
        }
        $logsearch = Get-EventLog -LogName $Logtype -EntryType $EntryType -after (Get-Date).AddDays(-1) | Where-Object { $_.Category.ToLower().Contains($search.ToLower()) -or $_.Message.ToLower().Contains($search.ToLower()) -or $_.Source.ToLower().Contains($search.ToLower())} | Format-List
        $search = $searchterm
        $logsearch
        }

process 
    {
    Search-Logs
    }

end {
    
}
